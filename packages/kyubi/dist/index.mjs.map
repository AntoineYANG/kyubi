{"version":3,"sources":["../src/utils/get-kyubi-config.ts","../src/utils/type-helper.ts","../src/index.ts"],"sourcesContent":["/*\r\n * @Author: Kyusho \r\n * @Date: 2024-02-14 17:37:09 \r\n * @Last Modified by: Kyusho\r\n * @Last Modified time: 2024-02-14 22:53:07\r\n */\r\n\r\nimport path from \"node:path\";\r\nimport { existsSync } from \"node:fs\";\r\n\r\nimport { partialOverwrite, type AllPartial } from \"./type-helper\";\r\nimport getPackageInfo from \"./get-package-info\";\r\n\r\n\r\nexport interface IKyubiConfig {\r\n  blog: {\r\n    /**\r\n     * The base path of the blog sub-app.\r\n     * @default \"/blog\"\r\n     */\r\n    basePath: string;\r\n  };\r\n  docs: {\r\n    /**\r\n     * The base path of the docs sub-app.\r\n     * @default \"/docs\"\r\n     */\r\n    basePath: string;\r\n  };\r\n  wiki: {\r\n    /**\r\n     * The base path of the wiki sub-app.\r\n     * @default \"/wiki\"\r\n     */\r\n    basePath: string;\r\n  };\r\n  extra: {\r\n    /**\r\n     * The base path of the extra sub-app.\r\n     * @default \"/extra\"\r\n     */\r\n    basePath: string;\r\n  };\r\n}\r\n\r\nexport type KyubiConfig = AllPartial<IKyubiConfig>;\r\n\r\nexport type KyubiConfigFunction = () => IKyubiConfig;\r\n\r\n\r\nexport const defaultKyubiConfig: IKyubiConfig = {\r\n  blog: {\r\n    basePath: \"/blog\",\r\n  },\r\n  docs: {\r\n    basePath: \"/docs\",\r\n  },\r\n  wiki: {\r\n    basePath: \"/wiki\",\r\n  },\r\n  extra: {\r\n    basePath: \"/extra\",\r\n  },\r\n};\r\n\r\nexport const defineConfig = (config: KyubiConfig | ((config: IKyubiConfig) => KyubiConfig)): IKyubiConfig => {\r\n  if (typeof config === \"function\") {\r\n    return partialOverwrite(defaultKyubiConfig, config(defaultKyubiConfig));\r\n  }\r\n  return partialOverwrite(defaultKyubiConfig, config);\r\n};\r\n\r\nexport const getKyubiConfigFile = (appRoot: string): string | undefined => {\r\n  return ['kyubi.config.ts', 'kyubi.config.js', 'kyubi.config.json'].map(filename => path.join(appRoot, filename)).find(existsSync);\r\n};\r\n\r\n/**\r\n * Get the kyubi configuration from the kyubi config file located in the root of the project.\r\n * \r\n * Checks the following files in order:\r\n * - kyubi.config.ts\r\n * - kyubi.config.js\r\n * - kyubi.config.json\r\n */\r\nconst getKyubiConfig = (appRoot: string): IKyubiConfig => {\r\n  const configFile = getKyubiConfigFile(appRoot);\r\n\r\n  return defineConfig(configFile ? require(configFile) : {});\r\n};\r\n\r\ninterface IKyubiProj {\r\n  package: Awaited<ReturnType<typeof getPackageInfo>>;\r\n  config: IKyubiConfig;\r\n}\r\n\r\nexport const validateKyubiProj = async (appRoot: string): Promise<IKyubiProj> => {\r\n  const pkg = await getPackageInfo(appRoot);\r\n  const config = getKyubiConfig(appRoot);\r\n\r\n  return {\r\n    package: pkg,\r\n    config,\r\n  };\r\n};\r\n\r\n\r\nexport default getKyubiConfig;\r\n","/*\r\n * @Author: Kyusho \r\n * @Date: 2024-02-14 17:40:22 \r\n * @Last Modified by: Kyusho\r\n * @Last Modified time: 2024-02-14 17:48:42\r\n */\r\n\r\nexport type AllReadonly<T extends Record<keyof any, any>> = {\r\n  readonly [K in keyof T]: T[K] extends Record<keyof any, any> ? AllReadonly<T[K]> : T[K];\r\n};\r\n\r\nexport type AllWritable<T extends Record<keyof any, any>> = {\r\n  -readonly [K in keyof T]: T[K] extends Record<keyof any, any> ? AllWritable<T[K]> : T[K];\r\n};\r\n\r\nexport type AllPartial<T extends Record<keyof any, any>> = {\r\n  [K in keyof T]?: T[K] extends Record<keyof any, any> ? AllPartial<T[K]> : T[K];\r\n};\r\n\r\nexport const partialOverwrite = <T extends Record<keyof any, any>>(origin: AllReadonly<T>, overwrite: AllPartial<T>): AllWritable<T> => {\r\n  // overwrite at every level\r\n  const result = Object.assign({}, origin, overwrite) as AllWritable<T>;\r\n  for (const key in overwrite) {\r\n    if (overwrite[key] !== null && overwrite[key] !== undefined) {\r\n      if (typeof overwrite[key] === \"object\") {\r\n        // @ts-ignore\r\n        result[key] = partialOverwrite(origin[key], overwrite[key]);\r\n      } else {\r\n        // @ts-ignore\r\n        result[key] = overwrite[key];\r\n      }\r\n    }\r\n  }\r\n  return result;\r\n};\r\n","/*\r\n * @Author: Kyusho \r\n * @Date: 2024-02-14 17:14:50 \r\n * @Last Modified by: Kyusho\r\n * @Last Modified time: 2024-02-14 23:28:05\r\n */\r\n\r\nimport type { NextConfig } from \"next\";\r\n\r\nimport { KyubiConfig } from \"./cli\";\r\nimport getKyubiConfig from \"./utils/get-kyubi-config\";\r\nimport { partialOverwrite } from \"./utils/type-helper\";\r\n\r\n\r\nconst kyubi = (origin: NextConfig = {}, config: KyubiConfig = {}): NextConfig => {\r\n  const kyubiConfig = partialOverwrite(getKyubiConfig(process.cwd()), config);\r\n  \r\n  return {\r\n    ...origin,\r\n    pageExtensions: [...new Set(\r\n      [...(origin.pageExtensions || []), \"js\", \"jsx\", \"ts\", \"tsx\", \"md\", \"mdx\"]\r\n    )],\r\n    webpack(config, context) {\r\n      if (config.module === undefined) {\r\n        config.module = { rules: [] };\r\n      } else if (config.module.rules === undefined) {\r\n        config.module.rules = [];\r\n      }\r\n\r\n      config.module.rules.push(\r\n        {\r\n          test: /\\.mdx?$/,\r\n          use: [\r\n            context.defaultLoaders.babel,\r\n            {\r\n              loader: \"kyubi-js/loader\",\r\n              options: {\r\n                config: kyubiConfig,\r\n              },\r\n            },\r\n          ],\r\n        },\r\n      );\r\n      \r\n      return config;\r\n    },\r\n  };\r\n};\r\n\r\n\r\nexport default kyubi;\r\nmodule.exports = kyubi;\r\n"],"mappings":"yPAOA,OAAOA,MAAU,OACjB,OAAS,cAAAC,MAAkB,KCWpB,IAAMC,EAAmB,CAAmCC,EAAwBC,IAA6C,CAEtI,IAAMC,EAAS,OAAO,OAAO,CAAC,EAAGF,EAAQC,CAAS,EAClD,QAAWE,KAAOF,EACZA,EAAUE,CAAG,IAAM,MAAQF,EAAUE,CAAG,IAAM,SAC5C,OAAOF,EAAUE,CAAG,GAAM,SAE5BD,EAAOC,CAAG,EAAIJ,EAAiBC,EAAOG,CAAG,EAAGF,EAAUE,CAAG,CAAC,EAG1DD,EAAOC,CAAG,EAAIF,EAAUE,CAAG,GAIjC,OAAOD,CACT,EDgBO,IAAME,EAAmC,CAC9C,KAAM,CACJ,SAAU,OACZ,EACA,KAAM,CACJ,SAAU,OACZ,EACA,KAAM,CACJ,SAAU,OACZ,EACA,MAAO,CACL,SAAU,QACZ,CACF,EAEaC,EAAgBC,GACvB,OAAOA,GAAW,WACbC,EAAiBH,EAAoBE,EAAOF,CAAkB,CAAC,EAEjEG,EAAiBH,EAAoBE,CAAM,EAGvCE,EAAsBC,GAC1B,CAAC,kBAAmB,kBAAmB,mBAAmB,EAAE,IAAIC,GAAYC,EAAK,KAAKF,EAASC,CAAQ,CAAC,EAAE,KAAKE,CAAU,EAW5HC,EAAkBJ,GAAkC,CACxD,IAAMK,EAAaN,EAAmBC,CAAO,EAE7C,OAAOJ,EAAaS,EAAaC,EAAQD,CAAU,EAAI,CAAC,CAAC,CAC3D,EAkBA,IAAOE,EAAQC,EE5Ff,IAAMC,EAAQ,CAACC,EAAqB,CAAC,EAAGC,EAAsB,CAAC,IAAkB,CAC/E,IAAMC,EAAcC,EAAiBC,EAAe,QAAQ,IAAI,CAAC,EAAGH,CAAM,EAE1E,MAAO,CACL,GAAGD,EACH,eAAgB,CAAC,GAAG,IAAI,IACtB,CAAC,GAAIA,EAAO,gBAAkB,CAAC,EAAI,KAAM,MAAO,KAAM,MAAO,KAAM,KAAK,CAC1E,CAAC,EACD,QAAQC,EAAQI,EAAS,CACvB,OAAIJ,EAAO,SAAW,OACpBA,EAAO,OAAS,CAAE,MAAO,CAAC,CAAE,EACnBA,EAAO,OAAO,QAAU,SACjCA,EAAO,OAAO,MAAQ,CAAC,GAGzBA,EAAO,OAAO,MAAM,KAClB,CACE,KAAM,UACN,IAAK,CACHI,EAAQ,eAAe,MACvB,CACE,OAAQ,kBACR,QAAS,CACP,OAAQH,CACV,CACF,CACF,CACF,CACF,EAEOD,CACT,CACF,CACF,EAGOK,EAAQP,EACf,OAAO,QAAUA","names":["path","existsSync","partialOverwrite","origin","overwrite","result","key","defaultKyubiConfig","defineConfig","config","partialOverwrite","getKyubiConfigFile","appRoot","filename","path","existsSync","getKyubiConfig","configFile","__require","get_kyubi_config_default","getKyubiConfig","kyubi","origin","config","kyubiConfig","partialOverwrite","get_kyubi_config_default","context","src_default"]}